//USE DATABASE [nam-westus-v1];
DECLARE EXTERNAL @SliceStart = "20180112";
DECLARE @inputFileNam string = @"/nam-csv-westus-v1/" + @SliceStart + "T{__fileHour}forecastHour00.csv";
DECLARE @inputFileSnotel string = "/snotel-csv-westus-v1/" + @SliceStart + ".{__fileHour}.{__SnotelState}.snotel.csv";

//1. Extract hourly nam forecast data
@namData =
    EXTRACT DateString string,
            Lat double,
            Lon double,
            APCPsurface double?,
            APCPStepSize int?,
            CSNOWsurface int,
            CRAINsurface int,
            TMPsurface double,
            Tmp2mAboveGround double,
            RH2mAboveGround double,
            TMP80mAboveGround double,
            TMPTrop double,
            WindSpeed10m double,
            WindDirection10m double,
            WindSpeed80m double,
            WindDirection80m double,
            WindSpeedTrop double,
            WindDirectionTrop double,
            __fileHour int
    FROM @inputFileNam
    USING Extractors.Csv(skipFirstNRows : 1, silent : true);

@namData =
    SELECT DateTime.ParseExact(DateString, "yyyyMMdd HH:00", null) AS Date,
           *,
           DateTime.ParseExact(@SliceStart, "yyyyMMdd", null) AS __fileDate
    FROM @namData
    WHERE __fileHour < 2; //was 85

@namData =
    SELECT Date.Date AS DatePart,
           *,
           0.0 AS DistanceToStationKm
    FROM @namData;

//2. Extract all snotel data
@snotelData =
    EXTRACT DateString string,
            StationName string,
            ElevationFt int,
            Lat double,
            Lon double,
            SnowWaterEquivalentIn float?,
            PrecipitationAccumulation float?,
            SnowDepthIn int?,
            AirTemperatureObservedF int?,
            __SnotelState string,
            __fileHour int
    FROM @inputFileSnotel
    USING Extractors.Csv(skipFirstNRows : 1, silent : true);

@snotelData =
    SELECT DateTime.ParseExact(DateString, "yyyyMMdd HH:00", null) AS Date,
           DateString,           
           StationName,
           ElevationFt,
           Lat,
           Lon,
           SnowWaterEquivalentIn,
           PrecipitationAccumulation,
           SnowDepthIn,
           AirTemperatureObservedF,
           __SnotelState AS SnotelState,
           __fileHour,
           DateTime.ParseExact(@SliceStart, "yyyyMMdd", null) AS __fileDate
    FROM @snotelData
    WHERE __fileHour < 2 AND __SnotelState IN ("WA"); //was 25 and ("AK", "AZ", "CA", "CO", "ID", "MT", "NM", "NV", "OR", "UT", "WA", "WY");

@snotelData =
    SELECT Date.Date AS DatePart,
           *,
           (int)Lat AS GridLat, //used to narrow matching criteria so we don't have to examine all sites
           (int)Lon AS GridLon 
    FROM @snotelData;

//3. Find unique snotel locations
//@uniqueSnotelLocations =
//    SELECT DISTINCT SnotelState,
//                    StationName,
//                    ElevationFt,
//                    Lat,
//                    Lon,
//                    (int)Lat AS GridLat, //used to narrow matching criteria so we don't have to examine all sites
//                    (int)Lon AS GridLon 
//    FROM @snotelData;

@namWithStations =
    COMBINE @namData AS nam 
    WITH @snotelData AS snotel 
    ON 
        nam.Date == snotel.Date 
    PRODUCE 
        DatePart DateTime,
        Date DateTime,
        DateString string,
        Lat double,
        Lon double,
        APCPsurface double?,
        APCPStepSize int?,
        CSNOWsurface int,
        CRAINsurface int,
        TMPsurface double,
        Tmp2mAboveGround double,
        RH2mAboveGround double,
        TMP80mAboveGround double,
        TMPTrop double,
        WindSpeed10m double,
        WindDirection10m double,
        WindSpeed80m double,
        WindDirection80m double,
        WindSpeedTrop double,
        WindDirectionTrop double,
        DistanceToStationKm float,
        StationName string,
        ElevationFt int,
        SnotelLat double,
        SnotelLon double,
        SnowWaterEquivalentIn float?,
        PrecipitationAccumulation float?,
        SnowDepthIn int?,
        AirTemperatureObservedF int?,
        SnotelState string,
        __fileHour int,
        __fileDate DateTime
    USING new OpenAvalancheProject.Pipeline.USql.CombinerNearestStation();

OUTPUT @namWithStations
    TO @"/debug-out/namwithstations.csv"
    USING Outputters.Csv(quoting:false, dateTimeFormat:null);

//OUTPUT @uniqueSnotelLocations
//    TO @"/debug-out/debugsnotellocations.csv"
//    USING Outputters.Csv(quoting:false, dateTimeFormat:null);

OUTPUT @snotelData
    TO @"/debug-out/snoteldata.csv"
    USING Outputters.Csv(quoting:false, dateTimeFormat:null);

OUTPUT @namData
    TO @"/debug-out/namdata.csv"
    USING Outputters.Csv(quoting:false, dateTimeFormat:null);

//4. Find the closest station to the forecast point


//TODO: join and add snotel data before storing
/*
INSERT INTO dbo.HourlyWeatherForecast
(
    DatePart,
    Date,
    DateString,
    Lat,
    Lon,
    APCPsurface,
    APCPStepSite,
    CSNOWsurface,
    CRAINsurface,
    TMPsurface,
    TMP2mAboveGround,
    RH2mAboveGround,
    TMP80mAboveGround,
    TMPTrop,
    WindSpeed10m,
    WindDirection10m,
    WindSpeed80m,
    WindDirection80m,
    WindSpeedTrop,
    WindDirectionTrop,
    __fileHour,
    __filedate
)
SELECT *
FROM @namData;

CREATE TABLE IF NOT EXISTS dbo.HourlyWeatherForecast
( 
    INDEX idx  
    CLUSTERED(DatePart ASC, Lat, Lon)
    DISTRIBUTED BY RANGE(DatePart) 
) AS SELECT * FROM @namData;
*/



/*
@dailyTable = 
    SELECT 
        MAX(TMPsurface) AS MaxTMPsurfaceF,
        MAX(TMP2mAboveGround) AS MaxTMP2mAboveGroundF,
        MAX(TMPTrop) AS MaxTMPTropF,
        MIN(TMPsurface) AS MinTMPsurfaceF,
        MIN(TMP2mAboveGround) AS MinTMP2mAboveGroundF,
        MIN(TMPTrop) AS MinTMPTropF,
        MAX(WindSpeed10m) AS MaxWindSpeed10m,
        MAX(WindSpeed80m) AS MaxWindSpeed80m,
        MAX(WindSpeedTrop) AS MaxWindSpeedTrop,
        AVG(WindDirection10m) AS AvgWindDirection10m,
        AVG(WindDirection80m) AS AvgWindDirection80m,
        AVG(WindDirectionTrop) AS AvgWindDirectionTrop,
*/        
        
           


